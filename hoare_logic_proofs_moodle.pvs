%Part-3: A Proof Checker for Hoare Proofs in PVS
hoare_logic_proofs  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

  %In this theory we develop a scheme for representing in PVS proofs of programs in Hoare Logic
  %This is done by defining an inductive datatype (preProof) an element of which is a proof in Hoare Logic
  %We define in PVS a proof checker (Proof?) that certifies consistency of a Hoare proof
  %We then prove in PVS the soundness and completeness (wlp_proof) of Hoare Logic

  IMPORTING hoare_triples

  S, S1, S2: VAR program
  Q: VAR assertion
  s: VAR state
  A: VAR assignment

  triple: TYPE = [# prog: program, pre, post: assertion #]
  tr: triple = (# prog := skip, pre := (LAMBDA s: true), post := (LAMBDA s: true) #)
  
  H, G: VAR triple
  
  C, P, R, P1, P2: VAR assertion
  
  %A proof in Hoare Logic as an object of an inductive datatype
  %A proof object is a tree of Hoare triples where each triple is supposed to
  %have been deduced as an instantiaton of a Hoar einference rule
  preProof: DATATYPE
  BEGIN
    skip_step(conclusion: triple): skip_step?
    assign_step(conclusion: triple): assign_step?
    ift_step(conclusion: triple, thenProof, elseProof: preProof): ift_step?
    while_step(conclusion: triple, bodyProof: preProof): while_step?
    seq_step(conclusion: triple, left, right: preProof): seq_step?
    conseq_step(conclusion: triple, subProof: preProof): conseq_step?
  END preProof
  
  
  % Some variables ranging over Hoare proofs
  M, M1, M2: VAR preProof

  Proof?(M): RECURSIVE bool =
    CASES M OF
      skip_step(H): skip?(H`prog) AND H`pre = H`post,
 %     assign_step(H): assign?(H`prog) AND H`pre = H`post o update(H`prog),
      assign_step(H): assign?(H`prog) AND H`pre = H`post o update(H`prog),
      ift_step(H, M1, M2): ift?(H`prog)
                           AND conclusion(M1)`pre = (H`pre /\ ifcond(H`prog))
			   AND conclusion(M2)`pre = (H`pre /\ ~ifcond(H`prog))
                           AND conclusion(M1)`post = H`post
                           AND conclusion(M2)`post = H`post
                           AND conclusion(M1)`prog = thenprog(H`prog)
                           AND conclusion(M2)`prog = elseprog(H`prog)
                           AND Proof?(M1)
                           AND Proof?(M2),
       while_step(H, M1): while?(H`prog)
                          AND conclusion(M1)`pre = (H`pre /\ wcond(H`prog))
                          AND conclusion(M1)`post = H`pre
                          AND conclusion(M1)`prog = body(H`prog)
                          AND H`post = (H`pre /\ ~wcond(H`prog))
                          AND Proof?(M1),
       seq_step(H, M1, M2): seq?(H`prog)
                            AND conclusion(M1)`pre = H`pre
                            AND conclusion(M2)`pre = conclusion(M1)`post
                            AND conclusion(M2)`post = H`post
                            AND conclusion(M1)`prog = left(H`prog)
                            AND conclusion(M2)`prog = right(H`prog)
                            AND Proof?(M1)
                            AND Proof?(M2),
        conseq_step(H, M1): conseq(H`pre, conclusion(M1)`pre)
                            AND conseq(conclusion(M1)`post, H`post)
                            AND conclusion(M1)`prog = H`prog
                            AND Proof?(M1)
    ENDCASES
    MEASURE M BY <<


  %Exercize 2:
  %defined in hoare_logic.pvs
  %x_gets_y: assignment = a2 %x := y
  %y_gets_z: assignment = a3 % y := z
  %z_gets_w: assignment = (LAMBDA (s): s WITH [(2) := s(3)]) % z := w
  %w_gets_x: assignment = (LAMBDA (s): s WITH [(3) := s(0)]) % w := x
  y_gets_x: assignment = (LAMBDA (s): s WITH [(1) := s(0)]) % y := x

  sswap: program = (assign(x_gets_y) ## assign(y_gets_x))
  
  x0: nat; y0: nat; z0: nat; w0: nat;
  xeqx0: assertion = (LAMBDA s: s(0)=x0); yeqy0: assertion = (LAMBDA s: s(1)=y0);
  xeqy: assertion = (LAMBDA s: s(0)=s(1)); xeqy0: assertion = (LAMBDA s: s(0)=y0);
  yeqx0: assertion = (LAMBDA s: s(1)=x0); zeqz0: assertion = (LAMBDA s: s(2)=z0);
  weqw0: assertion = (LAMBDA s: s(3)=w0);
  tr1: triple = (# pre := xeqy0, prog := assign(y_gets_x), post := xeqy /\ yeqy0 #)

  y_gets_x_step: preProof = assign_step(tr1)
  x_gets_y_step: preProof = assign_step((# pre := yeqy0, prog := assign(x_gets_y), post := xeqy0 #))
 
  sswap_prf: preProof = seq_step((# prog := sswap, pre := yeqy0, post := xeqy /\ yeqy0#),
                                 x_gets_y_step, y_gets_x_step)

  check: LEMMA xeqy0 = (xeqy /\ yeqy0) o y_gets_x

  checksswap_prf: LEMMA Proof?(sswap_prf)

  %1*Exercize: Included in the Final Project Assignment
  %Exercize 3: Formalize your Hoare proof on the MidTerm as preProof
  %Certify your proof in PVS using Proof?
  % x,y,z,r in order
  r_gets_x: assignment = (LAMBDA (s): s WITH [(3) := s(0)]) % r := x
  z_gets_0: assignment = (LAMBDA (s): s WITH [(2) := 0]) % z := 0
  test_con: test       = (LAMBDA (s): s(1) <= s(3)) % y<=r ?
  r_gets_ry: assignment = (LAMBDA (s): s WITH [(3) := s(3)-s(1)])
  incr_z: assignment   = (LAMBDA (s): s WITH [(2) := s(2)+1])

  B: assertion = (LAMBDA s: s(1) <= s(3))
  E: assertion = (LAMBDA s: s(0)=s(3)+s(1)*s(2))
  
  division: program = (assign(r_gets_x) ## assign(z_gets_0) ## (test_con ** (assign(r_gets_ry) ## assign(incr_z))))

  r_gets_x_step : preProof = assign_step((# prog:=assign(r_gets_x), pre := (LAMBDA s: true), post:= (LAMBDA s: (s(3)=s(0))) #))

  z_gets_0_step : preProof = assign_step((# prog:=assign(z_gets_0), pre := (LAMBDA s: (s(3)=s(0))), post:= (LAMBDA s:s(2)=0 AND (s(3)=s(0))) #))
  
  aux_z0 : preProof = conseq_step((# prog:=assign(z_gets_0),
  pre:=(LAMBDA s: (s(0)=s(3))), post:=(LAMBDA s: E(s)) #), z_gets_0_step)
  
  r_gets_ry_step : preProof = assign_step((# prog:=assign(r_gets_ry), pre := (LAMBDA s:E(s) AND B(s)), post:= (LAMBDA s: s(0)=s(3)+s(1)+s(1)*s(2) AND s(3)+s(1)>=s(1)) #))
  
  aux_r : preProof = conseq_step((# prog:=assign(r_gets_ry), pre := (LAMBDA s:E(s) AND B(s)), post:= (LAMBDA s: s(0)=s(3)+s(1)+s(1)*s(2)) #), r_gets_ry_step)
  
  incr_z_step : preProof = assign_step((# prog:=assign(incr_z), pre := (LAMBDA s: s(0)=s(3)+s(1)+s(1)*s(2)), post:= (LAMBDA s: E(s)) #))

  One_pre: preProof = seq_step((# prog := assign(r_gets_x) ## assign(z_gets_0), pre := (LAMBDA s: true), post :=(LAMBDA s:E(s)) #), r_gets_x_step, aux_z0 )
  
  Two_pre: preProof =  seq_step((# prog := assign(r_gets_ry) ## assign(incr_z), pre :=  (LAMBDA s: E(s) AND s(3)>=s(1)), post:= (LAMBDA s: E(s)) #), aux_r, incr_z_step)

  loop_step: preProof = while_step((# prog:=test_con ** (assign(r_gets_ry) ## assign(incr_z)), pre:=  (LAMBDA s:E(s)), post:= (LAMBDA s: E(s) AND NOT B(s)) #), Two_pre)

  aux_loop: preProof = conseq_step((# prog:=test_con ** (assign(r_gets_ry) ## assign(incr_z)), pre:=  (LAMBDA s:E(s)), post:= (LAMBDA s: E(s)) #), loop_step)

  test1: LEMMA Proof?(loop_step)

  div_pre: preProof = seq_step((# prog := division, pre :=  (LAMBDA s:true), post:= (LAMBDA s: E(s)) #), One_pre, aux_loop) 

  check_div: LEMMA Proof?(div_pre)
  
  %Soundness Theorem for partial correctness of Hoare Logic
  valid(H): bool = triple_valid(H`pre, H`prog, H`post)
  
  soundness: LEMMA  Proof?(M) => valid(conclusion(M))

  % What does completeness mean for Hoare Logic?
  % FORALL (S: Prog, P,Q: assertion): triple_valid(P, S, Q) => (EXISTS (M: preProof): Proof?(M)
  % Why should Hoare Logic be complete and, if so, how would you prove it?
  % First question boils down to can we always find a Loop Invariant to construct a Hoare proof?
  % Intuition: the weakest liberal precondition wlp(S)(Q) can awlays be used to construct a proof
  % For straight-line programs we have already seen how to construct wlp syntactically
  % What's a general definition that applies to all constructs including loops?
  %S: VAR program
  %Q: VAR assertion
  %s: VAR state
  % wlp(S)(Q)(s) : bool = (FORALL (X: trace): [| S |](X) AND s = first(X) => Q(last(X)))

  %Exercize1: Define stronget post condition sp(S)(P) similar to wlp
  %Formulate and prove a sanity lemma for sp similar to the one shown above

  Proves(M, H): bool = Proof?(M) AND conclusion(M) = H

  %Completeness for Partial Correctness proofs in Hoare Logic
  %For every program S and an assertion Q
  %mkTriple(wlp(S)(Q), S, Q)))
  mkTriple(pre: assertion, p: program, post: assertion): triple = (# pre:= pre, prog:= p, post:= post #)
  mkpreProof_skip(Q): preProof = skip_step(mkTriple(Q, skip, Q))
  mkpreProof_assign(Q, A): preProof = assign_step(mkTriple(Q o A, assign(A), Q))

  mkpreProof_conseq_step(ppre:assertion, ppost: assertion, prog: program, M: preProof): preProof =
     conseq_step(mkTriple(ppre, conclusion(M)`prog, ppost), M)
  mkpreProof_ift_step(S, C, Q, M1, M2): preProof =
     ift_step(mkTriple(wlp(S)(Q), S, Q),
                        mkpreProof_conseq_step( C  /\ conclusion(M1)`pre, Q, conclusion(M1)`prog, M1),
                        mkpreProof_conseq_step( ~C /\ conclusion(M2)`pre, Q, conclusion(M2)`prog, M2))
 %                      IF C THEN conclusion(M1)`prog ELSE conclusion(M2)`prog ENDIF, , M1, M2)
  
  %%2**Exercise: Included in Final Project Assignment Problems
  % Siddharth's comment: I could only prove the first three cases if Hoare_Completneness
  Hoare_Completeness:
    LEMMA (FORALL S, Q: (EXISTS M: Proves(M, mkTriple(wlp(S)(Q), S, Q))) )
 

  END hoare_logic_proofs
