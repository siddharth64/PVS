opsemwithstates  % [ parameters ]
		: THEORY

  BEGIN

  % ASSUMING
   % assuming declarations
  % ENDASSUMING

     vars: TYPE = {W, X, Y, Z}
     v: VAR vars

     statet : TYPE = ARRAY[vars -> nat]

     istatet : TYPE = {s: statet | (FORALL (v: vars): s(v) = 0) }

     s0, s1, s2: istatet
     st, s, t, q, r: VAR istatet

     init_state : LEMMA s(v) = 0

     test0: LEMMA (s0 WITH [(W) := 1, (W) := 2])(W) = 2
     test1: LEMMA (s0 WITH [(W) := s0(W)])(W) = 0
     test2: LEMMA (s WITH [(W) := s(W)])(W) = 0
     test3: LEMMA (s WITH [(W) := s(W)]) = s

  aexpt: DATATYPE
  BEGIN
  AId(v:vars): AId? 
  ANum(numb:nat): ANum?
  APlus(left: aexpt, right: aexpt): APlus?
  AMinus (left: aexpt, right: aexpt): AMinus?
  AMult (left: aexpt, right: aexpt): AMult?
  END aexpt

  bexpt: DATATYPE
  BEGIN
  BTrue: BTrue?
  BFalse: BFalse?
  BEq(left: aexpt, right: aexpt): BEq?
  BLe(left: aexpt, right: aexpt): BLe?
  BNot(exp: bexpt): BNot?
  BAnd(left: bexpt, right: bexpt): BAnd?
  END bexpt

  aexp, aexp1, aexp2: VAR aexpt
  bexp, bexp1, bexp2: VAR bexpt

  Minus(a,b: nat): nat = (IF a<b THEN 0 ELSE a-b ENDIF)
  aeval(st: statet, aexp): RECURSIVE nat =
   (CASES aexp OF
      AId(v): st(v),
      ANum(n): n,
      APlus(a1, a2): aeval(st, a1) + aeval(st, a2),
      AMinus(a1, a2): Minus(aeval(st, a1),  aeval(st, a2)),
      AMult(a1, a2): aeval(st, a1) * aeval(st, a2)
      ENDCASES)
   MEASURE aexp BY <<

   n: VAR nat
   aexpexec: LEMMA aeval(st, APlus(ANum(0), ANum(1))) = n

  beval(st: statet, bexp): RECURSIVE bool =
    (CASES bexp OF
      BTrue: true,
      BFalse: false,
      BEq(a1, a2): aeval(st, a1) = aeval(st, a2),
      BLe(a1, a2): aeval(st, a1) <= aeval(st, a2),
      BNot(b): NOT beval(st, b),
      BAnd(b1, b2): beval(st, b1) AND beval(st, b2)
      ENDCASES)
   MEASURE bexp BY <<

Evalaexp1 : LEMMA 
    aeval(st WITH [X := 5],  APlus(ANum(3), AMult(AId(X), ANum(2))) ) %(3 + (X * 2))
              = 13

Evalbexp1 : LEMMA beval(st WITH [X := 5], BAnd(BTrue, BNot(BLe(AId(X), ANum(4)))) ) % (true && ~(X â‰¤ 4))%imp
                       = true


    Opt (st:istatet, a: aexpt): RECURSIVE aexpt =
      (CASES a OF
        AId(v) : ANum(st(v)),
        ANum(n) : ANum(n),
	APlus(e1, e2): (CASES e1 OF
	                ANum(n): IF n=0 THEN Opt(st, e2) ELSE APlus(ANum(n), Opt(st, e2)) ENDIF
			ELSE APlus(Opt(st, e1), Opt(st, e2))
			ENDCASES),
	AMinus(e1,e2): AMinus(Opt(st, e1), Opt(st, e2)),
        AMult(e1, e2): AMult(Opt(st, e1), Opt(st, e2))
	ENDCASES)
       MEASURE a BY <<


    Opt_sound : THEOREM 
       (FORALL (st:istatet): (FORALL (a: aexpt): aeval(st, Opt(st, a)) = aeval(st, a)))

 %C. Proofs on Evaluation semantics of expressions: Part-1
%This file gives a template for modeling in PVS the operational semantics of arithmetic and boolean %expressions for the tiny language in the presence of states.  A state is modeled using the ARRAY %(function) data type of PVS and a definition for it and its suage has been provided in the file.  %For more details consult the PVS Language manual.  You are expected to fill the "...." parts in %the file to complete the definition of evaluation semantics and prove the soundness property %(after defining it) analogous to what is shown in opsem.pvs.  Make sure you discharge all tccs in %addition to proving the required theorems.

  END opsemwithstates
