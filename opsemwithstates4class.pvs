% Existence TCC generated (at line 17, column 5) for  s0: istatet
  % unchecked
s0_TCC1: OBLIGATION EXISTS (x: istatet): TRUE;

% Subtype TCC generated (at line 49, column 45) for  a - b
    % expected type  nat
  % unchecked
Minus_TCC1: OBLIGATION FORALL (a, b: nat): NOT a < b IMPLIES a - b >= 0;

% Termination TCC generated (at line 54, column 21) for  aeval(st, a1)
  % unchecked
aeval_TCC1: OBLIGATION
  FORALL (aexp: aexpt, a1: aexpt, a2: aexpt):
    aexp = APlus(a1, a2) IMPLIES a1 << aexp;

% Termination TCC generated (at line 54, column 37) for  aeval(st, a2)
  % unchecked
aeval_TCC2: OBLIGATION
  FORALL (aexp: aexpt, a1: aexpt, a2: aexpt):
    aexp = APlus(a1, a2) IMPLIES a2 << aexp;

% Termination TCC generated (at line 55, column 28) for  aeval(st, a1)
  % unchecked
aeval_TCC3: OBLIGATION
  FORALL (aexp: aexpt, a1: aexpt, a2: aexpt):
    aexp = AMinus(a1, a2) IMPLIES a1 << aexp;

% Termination TCC generated (at line 55, column 44) for  aeval(st, a2)
  % unchecked
aeval_TCC4: OBLIGATION
  FORALL (aexp: aexpt, a1: aexpt, a2: aexpt):
    aexp = AMinus(a1, a2) IMPLIES a2 << aexp;

% Termination TCC generated (at line 56, column 21) for  aeval(st, a1)
  % unchecked
aeval_TCC5: OBLIGATION
  FORALL (aexp: aexpt, a1: aexpt, a2: aexpt):
    aexp = AMult(a1, a2) IMPLIES a1 << aexp;

% Termination TCC generated (at line 56, column 37) for  aeval(st, a2)
  % unchecked
aeval_TCC6: OBLIGATION
  FORALL (aexp: aexpt, a1: aexpt, a2: aexpt):
    aexp = AMult(a1, a2) IMPLIES a2 << aexp;

% Termination TCC generated (at line 69, column 19) for  beval(st, b)
  % unchecked
beval_TCC1: OBLIGATION
  FORALL (bexp: bexpt, b: bexpt): bexp = BNot(b) IMPLIES b << bexp;

% Termination TCC generated (at line 70, column 20) for  beval(st, b1)
  % unchecked
beval_TCC2: OBLIGATION
  FORALL (bexp: bexpt, b1: bexpt, b2: bexpt):
    bexp = BAnd(b1, b2) IMPLIES b1 << bexp;

% Termination TCC generated (at line 70, column 38) for  beval(st, b2)
  % unchecked
beval_TCC3: OBLIGATION
  FORALL (st: statet, bexp: bexpt,
          v: [{z: [statet, bexpt] | z`2 << bexp} -> bool], b1: bexpt,
          b2: bexpt):
    v(st, b1) AND bexp = BAnd(b1, b2) IMPLIES b2 << bexp;

% The termination TCC (at line 87, column 38) in decl Opt for  Opt(st, e2)
  % is subsumed by aeval_TCC2

% The termination TCC (at line 87, column 70) in decl Opt for  Opt(st, e2)
  % is subsumed by aeval_TCC2

% The termination TCC (at line 88, column 14) in decl Opt for  Opt(st, e1)
  % is subsumed by aeval_TCC1

% The termination TCC (at line 88, column 27) in decl Opt for  Opt(st, e2)
  % is subsumed by aeval_TCC2

% The termination TCC (at line 90, column 23) in decl Opt for  Opt(st, e1)
  % is subsumed by aeval_TCC3

% The termination TCC (at line 90, column 36) in decl Opt for  Opt(st, e2)
  % is subsumed by aeval_TCC4

% The termination TCC (at line 91, column 29) in decl Opt for  Opt(st, e1)
  % is subsumed by aeval_TCC5

% The termination TCC (at line 91, column 42) in decl Opt for  Opt(st, e2)
  % is subsumed by aeval_TCC6