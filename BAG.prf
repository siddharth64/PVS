(BAG
 (pickNE 0
  (pickNE-1 nil 3797167162
   ("" (skeep)
    (("" (typepred "p")
      (("" (case "p`1=0")
        (("1" (inst * "(W,W)")
          (("1" (expand "pick2") (("1" (assert) nil nil)) nil)) nil)
         ("2" (case "p`2=0")
          (("1" (inst * "(B,B)")
            (("1" (expand "pick2") (("1" (assert) nil nil)) nil)) nil)
           ("2" (inst * "(W,B)")
            (("2" (expand "pick2") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (pick2 const-decl "[[Ball, Ball] -> bool]" BAG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Ball type-decl nil BAG nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" BAG nil)
    (W adt-constructor-decl "(W?)" BAG nil)
    (B adt-constructor-decl "(B?)" BAG nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" BAG nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil BAG nil) (BigBag type-eq-decl nil BAG nil))
   shostak))
 (removePair_TCC1 0
  (removePair_TCC1-1 nil 3797150480
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (replace -1)
        (("" (expand "pick2arb")
          (("" (lemma "epsilon_ax" ("p" "pick2(p)"))
            (("" (lemma "pickNE")
              (("" (inst?)
                (("" (assert)
                  (("" (ground)
                    (("" (replace -4)
                      (("" (smash)
                        (("" (auto-rewrite-defs)
                          (("" (case "p`1 >=2")
                            (("1" (assert) nil nil)
                             ("2" (case "p`1>=1 and p`2>=1")
                              (("1"
                                (smash)
                                (("1"
                                  (expand "pick2" -)
                                  (("1"
                                    (smash)
                                    (("1"
                                      (rewrite -6 :dir RL)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (case "p`2 >=2")
                                (("1"
                                  (expand "pick2" -)
                                  (("1"
                                    (smash)
                                    (("1"
                                      (rewrite -4 :dir RL)
                                      nil
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "p")
                                  (("2" (ground) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Ball type-decl nil BAG nil)
    (pick2 const-decl "[[Ball, Ball] -> bool]" BAG nil)
    (BigBag type-eq-decl nil BAG nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil) (Bag type-eq-decl nil BAG nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (pickNE formula-decl nil BAG nil)
    (pick2arb const-decl "[Ball, Ball]" BAG nil))
   nil))
 (removePair_TCC2 0
  (removePair_TCC2-1 nil 3797150480
   ("" (skeep)
    (("" (lemma "pickNE")
      (("" (auto-rewrite-defs)
        (("" (expand "pick2arb")
          (("" (lemma "epsilon_ax" ("p" "pick2(p)"))
            (("" (stop-rewrite)
              (("" (ground)
                (("1" (expand "pick2" -)
                  (("1" (ground)
                    (("1" (case "p`1 >=2")
                      (("1" (ground) nil nil)
                       ("2" (case "p`2 >=2")
                        (("1" (ground) nil nil)
                         ("2" (case "p`1>=1 and p`2>=1")
                          (("1" (ground) nil nil)
                           ("2" (typepred "p") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "pick2" -)
                  (("2" (case "p`1>=2")
                    (("1" (ground)
                      (("1" (inst?) (("1" (ground) nil nil)) nil)) nil)
                     ("2" (inst?) (("2" (ground) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (inst -2 "p") nil nil)
                 ("4" (inst -2 "p") nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pickNE formula-decl nil BAG nil)
    (pick2arb const-decl "[Ball, Ball]" BAG nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil BAG nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (BigBag type-eq-decl nil BAG nil)
    (pick2 const-decl "[[Ball, Ball] -> bool]" BAG nil)
    (Ball type-decl nil BAG nil))
   nil))
 (removePair_TCC3 0
  (removePair_TCC3-1 nil 3797150480
   ("" (skeep)
    (("" (expand "pick2arb")
      (("" (expand "pick2")
        (("" (lemma "epsilon_ax" ("p" "pick2(p)"))
          (("" (lemma "pickNE")
            (("" (inst?)
              (("" (ground)
                (("" (expand "pick2" -)
                  (("" (ground)
                    (("" (case "p`2>=2")
                      (("1" (ground) nil nil)
                       ("2" (case "p`1>=2")
                        (("1" (ground)
                          (("1" (case "p`1 >=1 and p`2>=1")
                            (("1" (ground) nil nil)
                             ("2" (ground)
                              (("2"
                                (case "pair=(W,W)")
                                (("1" (ground) nil nil)
                                 ("2"
                                  (ground)
                                  (("2"
                                    (case "pair`1=B")
                                    (("1"
                                      (ground)
                                      (("1"
                                        (case "pair`2=B")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (auto-rewrite-defs)
                                            (("1"
                                              (decompose-equality 6)
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality 2 5 6 7)
                                          (("2"
                                            (decompose-equality 5)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 2)
                                      (("2"
                                        (decompose-equality 5)
                                        (("1"
                                          (decompose-equality 6)
                                          nil
                                          nil)
                                         ("2"
                                          (decompose-equality 6)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (case "p`1 >=1 and p`2>=1")
                          (("1" (ground) nil nil)
                           ("2" (typepred "p") (("2" (ground) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pick2arb const-decl "[Ball, Ball]" BAG nil)
    (Ball type-decl nil BAG nil) (BigBag type-eq-decl nil BAG nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil) (Bag type-eq-decl nil BAG nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (epsilon_ax formula-decl nil epsilons nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" BAG nil)
    (B adt-constructor-decl "(B?)" BAG nil)
    (W adt-constructor-decl "(W?)" BAG nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" BAG nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (pickNE formula-decl nil BAG nil)
    (pick2 const-decl "[[Ball, Ball] -> bool]" BAG nil))
   nil))
 (reduceSize 0
  (reduceSize-1 nil 3797152718
   ("" (skeep) (("" (expand "removePair") (("" (smash) nil nil)) nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (removePair const-decl "Bag" BAG nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   shostak))
 (simulateGame_TCC1 0
  (simulateGame_TCC1-1 nil 3797150480
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (decompose-equality 2) nil nil)
       ("2" (decompose-equality 2) nil nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NEBag type-eq-decl nil BAG nil) (Bag type-eq-decl nil BAG nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (simulateGame_TCC2 0
  (simulateGame_TCC2-1 nil 3797150480
   ("" (skeep)
    (("" (lemma "reduceSize" ("p" "b"))
      (("" (ground)
        (("" (lemma "simulateGame_TCC1")
          (("" (inst?) (("" (ground) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((NEBag type-eq-decl nil BAG nil) (BigBag type-eq-decl nil BAG nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil) (Bag type-eq-decl nil BAG nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (reduceSize formula-decl nil BAG nil)
    (simulateGame_TCC1 subtype-tcc nil BAG nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (simulateGame_TCC3 0
  (simulateGame_TCC3-1 nil 3797150480
   ("" (skeep)
    (("" (lemma "reduceSize" ("p" "b")) (("" (ground) nil nil)) nil))
    nil)
   ((NEBag type-eq-decl nil BAG nil) (BigBag type-eq-decl nil BAG nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil) (Bag type-eq-decl nil BAG nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (reduceSize formula-decl nil BAG nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (invariant 0
  (invariant-1 nil 3797150481
   ("" (skeep)
    (("" (expand "removePair")
      (("" (assert)
        (("" (smash)
          (("1" (expand "even?" -1)
            (("1" (expand "even?" 1)
              (("1" (skeep)
                (("1" (instantiate * ("j-1")) (("1" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "even?")
            (("2" (skeep)
              (("2" (instantiate * "j+1") (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (even? const-decl "bool" integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (removePair const-decl "Bag" BAG nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (lastBall 0
  (lastBall-1 nil 3797150829
   ("" (measure-induct+ "b`1 + b`2" "b")
    (("" (case "x!1=(1,0)")
      (("1" (replace -1)
        (("1" (assert)
          (("1" (expand "simulateGame" 1)
            (("1" (expand "even?" 1) (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "x!1=(0,1)")
        (("1" (replace -1)
          (("1" (expand "simulateGame" 2) (("1" (propax) nil nil))
            nil))
          nil)
         ("2" (case "x!1`1 + x!1`2 >1")
          (("1" (instantiate * "removePair(x!1)")
            (("1" (lemma "reduceSize")
              (("1" (inst?)
                (("1" (assert)
                  (("1" (expand "simulateGame" 3)
                    (("1" (smash)
                      (("1" (lemma "invariant")
                        (("1" (inst * "x!1")
                          (("1" (replace -1) (("1" (propax) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "invariant")
                        (("2" (inst * "x!1")
                          (("2" (replace -1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "reduceSize")
              (("2" (inst * "x!1") (("2" (assert) nil nil)) nil)) nil)
             ("3" (propax) nil nil))
            nil)
           ("2" (assert)
            (("2" (typepred "x!1")
              (("2" (typepred "x!1`1" "x!1`2")
                (("2" (ground)
                  (("2" (case "x!1`1=0")
                    (("1" (ground) nil nil)
                     ("2" (case "x!1`2=0")
                      (("1" (ground) nil nil) ("2" (ground) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Bag type-eq-decl nil BAG nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NEBag type-eq-decl nil BAG nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (Ball type-decl nil BAG nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (simulateGame def-decl "Ball" BAG nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (even? const-decl "bool" integers nil)
    (W? adt-recognizer-decl "[Ball -> boolean]" BAG nil)
    (W adt-constructor-decl "(W?)" BAG nil)
    (B? adt-recognizer-decl "[Ball -> boolean]" BAG nil)
    (B adt-constructor-decl "(B?)" BAG nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (invariant formula-decl nil BAG nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (reduceSize formula-decl nil BAG nil)
    (BigBag type-eq-decl nil BAG nil)
    (removePair const-decl "Bag" BAG nil))
   shostak)))

