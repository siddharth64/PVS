(tailfact
 (tailfact_TCC1 0
  (tailfact_TCC1-1 nil 3792717974
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (tailfact_TCC2 0
  (tailfact_TCC2-1 nil 3792717974
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (myfact_TCC1 0
  (myfact_TCC1-1 nil 3792717974
   ("" (skosimp*)
    (("" (typepred "i!1")
      (("" (assert)
        (("" (case "i!1 >= 1")
          (("1" (lift-if)
            (("1" (case "i!1 > 1")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil))
 (fact_eq 0
  (MAYBE "" 3792730952
   ("" (case "FORALL (m, n: nat): m*myfact(n)=tailfact(n,m)")
    (("1" (inst?)
      (("1" (skolem!) (("1" (inst?) (("1" (assert) nil nil)) nil))
        nil))
      nil)
     ("2" (induct "n" 1)
      (("1" (expand "myfact" 1)
        (("1" (expand "tailfact" 1) (("1" (propax) nil nil)) nil)) nil)
       ("2" (skolem!)
        (("2" (flatten)
          (("2" (skolem! 1)
            (("2" (expand "myfact" 1)
              (("2" (expand "tailfact" 1)
                (("2" (instantiate -1 ("j!1 * m!1 + m!1"))
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (myfact def-decl "nat" tailfact nil)
    (tailfact def-decl "nat" tailfact nil))
   shostak)
  (fact_eq-1 nil 3792717997
   ("" (induct "n")
    (("1" (ground)
      (("1" (expand "myfact")
        (("1" (expand "tailfact") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (expand "myfact")
      (("2" (skosimp*) (("2" (postpone) nil nil)) nil)) nil))
    nil)
   nil shostak)))

