(opsemwithstates
 (s0_TCC1 0
  (s0_TCC1-1 nil 3794807004
   ("" (name "f" "LAMBDA (v: vars): 0") (("" (inst?) nil nil)) nil)
   ((istatet type-eq-decl nil opsemwithstates nil)
    (statet type-eq-decl nil opsemwithstates nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (vars type-decl nil opsemwithstates nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil))
   shostak))
 (init_state 0
  (init_state-1 nil 3794806592
   ("" (skosimp*) (("" (typepred "s!1") (("" (inst?) nil nil)) nil))
    nil)
   ((istatet type-eq-decl nil opsemwithstates nil)
    (statet type-eq-decl nil opsemwithstates nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (vars type-decl nil opsemwithstates nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (test0 0 (test0-1 nil 3794806635 ("" (smash) nil nil) nil shostak))
 (test1 0
  (test1-1 nil 3794806661
   ("" (typepred "s0") (("" (inst?) (("" (smash) nil nil)) nil)) nil)
   ((W adt-constructor-decl "(W?)" opsemwithstates nil)
    (W? adt-recognizer-decl "[vars -> boolean]" opsemwithstates nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (vars type-decl nil opsemwithstates nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (statet type-eq-decl nil opsemwithstates nil)
    (istatet type-eq-decl nil opsemwithstates nil)
    (s0 const-decl "istatet" opsemwithstates nil))
   shostak))
 (test2 0
  (test2-1 nil 3794806691
   ("" (skosimp*)
    (("" (typepred "s!1") (("" (inst?) (("" (smash) nil nil)) nil))
      nil))
    nil)
   ((istatet type-eq-decl nil opsemwithstates nil)
    (statet type-eq-decl nil opsemwithstates nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (vars type-decl nil opsemwithstates nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (W? adt-recognizer-decl "[vars -> boolean]" opsemwithstates nil)
    (W adt-constructor-decl "(W?)" opsemwithstates nil))
   shostak))
 (test3 0
  (test3-1 nil 3794806744 ("" (skosimp*) (("" (smash) nil nil)) nil)
   nil shostak))
 (Minus_TCC1 0
  (Minus_TCC1-1 nil 3794806591
   ("" (skosimp*) (("" (smash) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (aeval_TCC1 0
  (aeval_TCC1-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsemwithstates
     nil))
   nil))
 (aeval_TCC2 0
  (aeval_TCC2-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsemwithstates
     nil))
   nil))
 (aeval_TCC3 0
  (aeval_TCC3-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsemwithstates
     nil))
   nil))
 (aeval_TCC4 0
  (aeval_TCC4-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsemwithstates
     nil))
   nil))
 (aeval_TCC5 0
  (aeval_TCC5-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsemwithstates
     nil))
   nil))
 (aeval_TCC6 0
  (aeval_TCC6-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsemwithstates
     nil))
   nil))
 (beval_TCC1 0
  (beval_TCC1-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[bexpt])" opsemwithstates
     nil))
   nil))
 (beval_TCC2 0
  (beval_TCC2-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[bexpt])" opsemwithstates
     nil))
   nil))
 (beval_TCC3 0
  (beval_TCC3-1 nil 3794806591
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[bexpt])" opsemwithstates
     nil))
   nil))
 (Opt_sound 0
  (Opt_sound-1 nil 3794806761
   ("" (skolem!)
    (("" (auto-rewrite-defs)
      (("" (apply (try (induct "a") (then (skosimp*) (smash)) (skip)))
        nil nil))
      nil))
    nil)
   ((aexpt type-decl nil opsemwithstates nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (vars type-decl nil opsemwithstates nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (statet type-eq-decl nil opsemwithstates nil)
    (aeval def-decl "nat" opsemwithstates nil)
    (istatet type-eq-decl nil opsemwithstates nil)
    (Opt def-decl "aexpt" opsemwithstates nil)
    (aexpt_induction formula-decl nil opsemwithstates nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak)))

