(hoare_triples
 (skip_rule 0
  (skip_rule-1 nil 3795057382
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (assignment_rule 2
  (assignment_rule-3 "glassbox grind" 3795576830
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (skolem-typepred)
          (("" (flatten) (("" (replace*) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (assignment_rule-2 "grind proof" 3795057741 ("" (grind) nil nil) nil
   shostak)
  (assignment_rule-1 nil 3795057557
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (O const-decl "T3" function_props nil)
    (last const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (x_plus_y_check 0
  (x_plus_y_check-3 "grind$" 3795347579
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (replace*)
            ((""
              (assert :let-reduce? t :quant-simp? nil
                      :implicit-typepreds? nil :ignore-typepreds? nil
                      :cases-rewrite? nil)
              nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (x_plus_y_check-2 "proof with grind" 3795347497 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (x_gets_x_plus_1 const-decl "assignment" hoare_triples nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (x_plus_y_check-1 nil 3795347284
   ("" (auto-rewrite-defs)
    (("" (assert) (("" (skosimp*) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (x_gets_x_plus_1 const-decl "assignment" hoare_triples nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (sanityOnAsserts 0
  (sanityOnAsserts-1 nil 3795932054
   ("" (skosimp*)
    (("" (rewrite "extensionality") (("" (grind) nil nil)) nil)) nil)
   ((extensionality formula-decl nil functions nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (=> const-decl "bool" hoare_triples nil)
    (test type-eq-decl nil Hoare_logic nil)
    (~ const-decl "bool" hoare_triples nil)
    (// const-decl "bool" hoare_triples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil))
   shostak))
 (conditional_rule 0
  (conditional_rule-2 "with grind$" 3795576960
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              ((""
                (assert :let-reduce? t :quant-simp? nil
                        :implicit-typepreds? nil :ignore-typepreds? nil
                        :cases-rewrite? nil)
                (("" (bddsimp)
                  (("1" (inst? :if-match t :polarity? nil)
                    (("1" (replace*) nil nil)) nil)
                   ("2" (inst? :if-match t :polarity? nil)
                    (("2" (replace*)
                      (("2"
                        (assert :let-reduce? t :quant-simp? nil
                                :implicit-typepreds? nil
                                :ignore-typepreds? nil :cases-rewrite?
                                nil)
                        (("2" (inst? :if-match t :polarity? nil)
                          (("2" (replace*) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (conditional_rule-1 nil 3795058108
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?) (("" (inst?) (("" (smash) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (first const-decl "state" Hoare_logic nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil)
    (~ const-decl "bool" hoare_triples nil)
    ([\|\|] def-decl "bool" Hoare_logic nil))
   shostak))
 (composition_rule 0
  (composition_rule-2 "with grind" 3795577035 ("" (grind) nil nil) nil
   shostak)
  (composition_rule-1 nil 3795507354
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst - "Z!1")
              (("" (replace*) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil))
   shostak))
 (while_rule 1
  (while_rule-2 "proof with smash and no grind" 3795064716
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (measure-induct+ "X`length" "X")
        (("" (expand "triple_holds")
          (("" (expand "[||]" +)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "Z")
                  (("1" (inst - "Y")
                    (("1" (auto-rewrite-defs)
                      (("1" (stop-rewrite "[||]")
                        (("1" (assert)
                          (("1" (replace*) (("1" (smash) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (auto-rewrite-defs)
                (("2" (stop-rewrite "[||]") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (~ const-decl "bool" hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (test type-eq-decl nil Hoare_logic nil)
    (** adt-constructor-decl "[[test, program] -> (while?)]"
     Hoare_logic nil)
    (while? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak)
  (while_rule-1 nil 3795063002
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (measure-induct+ "X`length" "X")
        (("" (expand "triple_holds")
          (("" (expand "[||]" +)
            (("" (ground)
              (("1" (skeep)
                (("1" (inst - "Z")
                  (("1" (inst - "Y")
                    (("1" (grind :exclude "[||]") nil nil)) nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (~ const-decl "bool" hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (test type-eq-decl nil Hoare_logic nil)
    (** adt-constructor-decl "[[test, program] -> (while?)]"
     Hoare_logic nil)
    (while? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (conseq_rule 1
  (conseq_rule-3 "with grind" 3795576749 ("" (grind) nil nil) nil
   shostak)
  (conseq_rule-2 "without grind" 3795069149
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (inst?)
            (("" (inst?) (("" (inst?) (("" (ground) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (conseq const-decl "bool" hoare_triples nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (yes "simple grind" 3795068978
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert) (("" (skosimp*) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (conseq const-decl "bool" hoare_triples nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (conseq_rule-1 nil 3795068696
   ("" (skeep)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*) (("" (grind :exclude "[||]") nil nil)) nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (conseq const-decl "bool" hoare_triples nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak))
 (wlp_valid 0
  (wlp_valid-5 "glass box grind" 3795395150
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (skolem-typepred)
          (("" (flatten)
            ((""
              (assert :let-reduce? t :quant-simp? nil
                      :implicit-typepreds? nil :ignore-typepreds? nil
                      :cases-rewrite? nil)
              (("" (inst? :if-match t :polarity? nil)
                (("" (replace*) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (wlp_valid-4 "with grind" 3795395090 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (wlp_valid-3 "mismash" 3795394925
   ("" (skeep)
    (("" (auto-rewrite "triple_valid" "triple_holds" "wlp")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (triple_valid const-decl "bool" hoare_triples nil))
   shostak)
  (wlp_valid-2 nil 3795394873
   ("" (skeep)
    (("" (auto-rewrite "triple_valid" "triple_holds" "wlp")
      (("" (skeep) (("" (inst?) (("" (prop) nil))))))))
    nil)
   ((triple_valid const-decl "bool" hoare_triples nil)
    (triple_holds const-decl "bool" hoare_triples nil)
    (wlp const-decl "bool" hoare_triples nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (last const-decl "state" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil))
   nil))
 (wlp_unique 0
  (wlp_unique-1 nil 3796039766
   ("" (skosimp*) (("" (assert) nil nil)) nil) nil shostak))
 (wlp_skip 0
  (wlp_skip-3 nil 3795612241
   ("" (skeep)
    (("" (rewrite "extensionality")
      (("" (rewrite "wlp")
        (("" (skosimp*)
          (("" (iff)
            (("" (ground)
              (("1" (inst - "mkskiptr(x!1)")
                (("1" (auto-rewrite-defs) (("1" (ground) nil)))))
               ("2" (grind) nil))))))))))))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (first const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    (last const-decl "state" Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (skip adt-constructor-decl "(skip?)" Hoare_logic nil)
    (skip? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (extensionality formula-decl nil functions nil))
   nil))
 (wlp_assign 0
  (wlp_assign-4 nil 3795612466
   ("" (skeep)
    (("" (rewrite "extensionality")
      (("" (rewrite "wlp")
        (("" (skosimp*)
          (("" (iff)
            (("" (ground)
              (("1" (inst - "mkassigntr(x!1, A)")
                (("1" (auto-rewrite-defs) (("1" (ground) nil nil))
                  nil))
                nil)
               ("2" (grind) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((extensionality formula-decl nil functions nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (wlp const-decl "bool" hoare_triples nil)
    (assign? adt-recognizer-decl "[program -> boolean]" Hoare_logic
     nil)
    (assign adt-constructor-decl "[assignment -> (assign?)]"
     Hoare_logic nil)
    (assignment type-eq-decl nil Hoare_logic nil)
    (O const-decl "T3" function_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (empty_seq const-decl "finseq" finite_sequences nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil))
 (wlp_seq 0
  (wlp_seq-2 nil 3795612924
   ("" (skeep)
    (("" (rewrite "extensionality")
      (("" (rewrite "wlp")
        (("" (skosimp*)
          (("" (iff)
            (("" (ground)
              (("1" (auto-rewrite-defs)
                (("1" (assert)
                  (("1" (skosimp*)
                    (("1" (inst - "splice(X!1, X!2)")
                      (("1" (grind) nil nil) ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (auto-rewrite-defs)
                (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (X!1 skolem-const-decl "trace" hoare_triples nil)
    (X!2 skolem-const-decl "trace" hoare_triples nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (last const-decl "state" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (|##| adt-constructor-decl "[[program, program] -> (seq?)]"
     Hoare_logic nil)
    (seq? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (wlp const-decl "bool" hoare_triples nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (extensionality formula-decl nil functions nil))
   nil)
  (wlp_seq-1 nil 3795602822
   ("" (skeep)
    (("" (rewrite "wlp")
      (("" (rewrite "extensionality")
        (("" (skosimp*)
          (("" (rewrite "extensionality")
            (("" (skosimp*)
              (("" (iff)
                (("" (hide 2 3)
                  (("" (ground)
                    (("1" (auto-rewrite-defs)
                      (("1" (assert)
                        (("1" (skosimp*)
                          (("1" (inst - "splice(X!1, X!2)")
                            (("1" (grind) nil nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (auto-rewrite-defs)
                      (("2" (assert) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((wlp const-decl "bool" hoare_triples nil)
    (program type-decl nil Hoare_logic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (seq? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (|##| adt-constructor-decl "[[program, program] -> (seq?)]"
     Hoare_logic nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (extensionality formula-decl nil functions nil))
   shostak))
 (wlp_cond 0
  (wlp_cond-1 nil 3798088954
   ("" (skeep)
    (("" (smash)
      (("" (rewrite "extensionality")
        (("" (skosimp*)
          (("" (rewrite "wlp")
            (("" (auto-rewrite-defs) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((extensionality formula-decl nil functions nil)
    (program type-decl nil Hoare_logic nil)
    (assertion type-eq-decl nil hoare_triples nil)
    (wlp const-decl "bool" hoare_triples nil)
    (ift? adt-recognizer-decl "[program -> boolean]" Hoare_logic nil)
    (IF adt-constructor-decl "[[test, program, program] -> (ift?)]"
     Hoare_logic nil)
    (test type-eq-decl nil Hoare_logic nil)
    (// const-decl "bool" hoare_triples nil)
    (/\\ const-decl "bool" hoare_triples nil)
    (~ const-decl "bool" hoare_triples nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil))
   shostak))
 (wlp_is_inv 0
  (wlp_is_inv-1 nil 3795405513
   ("" (skeep)
    (("" (expand "triple_valid")
      (("" (expand "triple_holds")
        (("" (measure-induct+ "length(X)" "X")
          (("" (auto-rewrite-defs)
            (("" (stop-rewrite "wlp" "first" "last")
              (("" (stop-rewrite "[||]")
                (("" (assert)
                  (("" (flatten)
                    (("" (auto-rewrite "wlp")
                      (("" (assert)
                        (("" (skeep)
                          (("" (inst -2 "X")
                            (("" (ground)
                              ((""
                                (replace -6 -4)
                                ((""
                                  (rewrite "[||]" -4)
                                  ((""
                                    (prop)
                                    (("1" (postpone) nil nil)
                                     ("2"
                                      (assert)
                                      (("2" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)))

