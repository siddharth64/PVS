(opsem
 (Minus_TCC1 0
  (Minus_TCC1-3 "" 3794739965
   ("" (skosimp*) (("" (smash) nil nil)) nil) nil shostak)
  (Minus_TCC1-2 "" 3794714747
   ("" (skosimp*) (("" (assert) nil nil)) nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (Minus_TCC1-1 nil 3793874117 ("" (subtype-tcc) nil nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (aeval_TCC1 0
  (aeval_TCC1-2 "" 3794738300
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil))
   shostak)
  (aeval_TCC1-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil)) nil))
 (aeval_TCC2 0
  (aeval_TCC2-2 "" 3794739554
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (aeval_TCC2-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil)) nil))
 (aeval_TCC3 0
  (aeval_TCC3-2 "" 3794739663
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (aeval_TCC3-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil)) nil))
 (aeval_TCC4 0
  (aeval_TCC4-2 "" 3794739682
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (aeval_TCC4-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil)) nil))
 (aeval_TCC5 0
  (aeval_TCC5-2 "" 3794739698
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (aeval_TCC5-1 nil 3792910034 ("" (subtype-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil)) nil))
 (aeval_TCC6 0
  (aeval_TCC6-2 "" 3794739717
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (aeval_TCC6-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[aexpt])" opsem nil)) nil))
 (aexpexec 0
  (aexpexec-1 nil 3792934674
   ("" (auto-rewrite-defs)
    (("" (skosimp*) (("" (assert) (("" (postpone) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (beval_TCC1 0
  (beval_TCC1-2 "" 3794739735
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (beval_TCC1-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[bexpt])" opsem nil)) nil))
 (beval_TCC2 0
  (beval_TCC2-2 "" 3794739755
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (beval_TCC2-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[bexpt])" opsem nil)) nil))
 (beval_TCC3 0
  (beval_TCC3-2 "" 3794739794
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (replace*) (("" (smash) nil nil)) nil)) nil))
    nil)
   nil shostak)
  (beval_TCC3-1 nil 3792910034 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[bexpt])" opsem nil)) nil))
 (optprop 0
  (optprop-3 "apply strategy as black box" 3793876089
   ("" (auto-rewrite-defs)
    (("" (apply (try (induct "a") (then (skosimp*) (smash)) (skip)))
      nil nil))
    nil)
   nil shostak)
  (optprop-2 "proof with try and smash" 3793874924
   ("" (auto-rewrite-defs)
    (("" (induct "a")
      (("1" (skosimp*) (("1" (smash) nil nil)) nil)
       ("2" (skosimp*) (("2" (smash) nil nil)) nil)
       ("3" (skosimp*) (("3" (smash) nil nil)) nil)
       ("4" (skosimp*) (("4" (smash) nil nil)) nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (aexpt_induction formula-decl nil opsem nil)
    (Optimize def-decl "aexpt" opsem nil)
    (aeval def-decl "nat" opsem nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aexpt type-decl nil opsem nil))
   shostak)
  (optprop-1 nil 3793872506
   ("" (auto-rewrite-defs)
    (("" (induct "a")
      (("1" (skosimp*) (("1" (assert) nil nil)) nil)
       ("2" (skosimp*)
        (("2" (assert) (("2" (lift-if) (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("3" (skosimp*) (("3" (assert) nil nil)) nil)
       ("4" (skosimp*) (("4" (assert) nil nil)) nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (aexpt_induction formula-decl nil opsem nil)
    (Optimize def-decl "aexpt" opsem nil)
    (aeval def-decl "nat" opsem nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (aexpt type-decl nil opsem nil))
   nil)))

