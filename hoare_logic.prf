(Hoare_logic
 (tr2_TCC1 0
  (tr2_TCC1-1 nil 3795601571 ("" (subtype-tcc) nil nil) nil nil))
 (tr2p_TCC1 0
  (tr2p_TCC1-1 nil 3795601571 ("" (subtype-tcc) nil nil) nil nil))
 (tr2p_TCC2 0
  (tr2p_TCC2-1 nil 3795601571 ("" (subtype-tcc) nil nil) nil nil))
 (first_TCC1 0
  (first_TCC1-1 nil 3794574333
   ("" (skosimp*) (("" (typepred "X!1") (("" (assert) nil nil)) nil))
    nil)
   ((trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (last_TCC1 0
  (last_TCC1-1 nil 3794574333 ("" (subtype-tcc) nil nil) nil nil))
 (splice_TCC1 0
  (splice_TCC1-1 nil 3794574333 ("" (subtype-tcc) nil nil)
   ((O const-decl "finseq" finite_sequences nil)) nil))
 (programSize_TCC1 0
  (programSize_TCC1-1 nil 3794574333
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (auto-rewrite -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil))
 (programSize_TCC2 0
  (programSize_TCC2-2 nil 3794732136
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (auto-rewrite -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil)
  (programSize_TCC2-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil))
 (programSize_TCC3 0
  (programSize_TCC3-2 nil 3794732077
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (auto-rewrite -1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil)
  (programSize_TCC3-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil))
 (programSize_TCC4 0
  (programSize_TCC4-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil))
 (programSize_TCC5 0
  (programSize_TCC5-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((<< adt-def-decl "(strict_well_founded?[program])" Hoare_logic
     nil))
   nil))
 (specialbrackets_TCC1 0
  (specialbrackets_TCC1-1 nil 3794574333 ("" (grind) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (specialbrackets_TCC2 0
  (specialbrackets_TCC2-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (< def-decl "bool" ordinals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (first const-decl "state" Hoare_logic nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (specialbrackets_TCC3 0
  (specialbrackets_TCC3-2 "galss-box termination-tcc$" 3795402124
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (lift-if :updates? t)
                (("" (replace*)
                  ((""
                    (assert :let-reduce? t :quant-simp? nil
                            :implicit-typepreds? nil :ignore-typepreds?
                            nil :cases-rewrite? nil)
                    (("" (bddsimp)
                      (("" (lift-if :updates? t)
                        ((""
                          (assert :let-reduce? t :quant-simp? nil
                                  :implicit-typepreds? nil
                                  :ignore-typepreds? nil
                                  :cases-rewrite? nil)
                          nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((lex2 const-decl "ordinal" lex2 nil)
    (last const-decl "state" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (first const-decl "state" Hoare_logic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak)
  (specialbrackets_TCC3-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (first const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (specialbrackets_TCC4 0
  (specialbrackets_TCC4-3 "simpler custom proof" 3795402979
   ("" (auto-rewrite-defs)
    (("" (stop-rewrite "lex2")
      (("" (skosimp*)
        (("" (assert)
          (("" (auto-rewrite "lex2_lt") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (specialbrackets_TCC4-2 "glassbox termination-tcc" 3795400948
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      (("" (skolem-typepred)
        (("" (flatten)
          (("" (skolem-typepred)
            (("" (flatten)
              (("" (lift-if :updates? t)
                (("" (replace*)
                  ((""
                    (assert :let-reduce? t :quant-simp? nil
                            :implicit-typepreds? nil :ignore-typepreds?
                            nil :cases-rewrite? nil)
                    nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (first const-decl "state" Hoare_logic nil)
    (lex2_lt formula-decl nil lex2 nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)
  (specialbrackets_TCC4-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (< def-decl "bool" ordinals nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (specialbrackets_TCC5 0
  (specialbrackets_TCC5-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (< def-decl "bool" ordinals nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (specialbrackets_TCC6 0
  (specialbrackets_TCC6-1 nil 3794574333 ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (< def-decl "bool" ordinals nil)
    (programSize def-decl "nat" Hoare_logic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (lex2 const-decl "ordinal" lex2 nil))
   nil))
 (test 0
       (test-1 nil 3794574608
        ("" (skosimp*)
         (("" (auto-rewrite-defs)
           (("" (assert) (("" (ground) nil nil)) nil)) nil))
         nil)
        ((first const-decl "state" Hoare_logic nil)
         (last const-decl "state" Hoare_logic nil)
         ([\|\|] def-decl "bool" Hoare_logic nil)
         (int_minus_int_is_int application-judgement "int" integers
          nil))
        shostak))
 (testswap 0
  (testswap-2 "with replaces instead of auto-rewrites" 3795273960
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (replace -2)
            (("" (assert)
              (("" (replace -4) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (swap const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (a1 const-decl "assignment" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (a2 const-decl "assignment" Hoare_logic nil)
    (a3 const-decl "assignment" Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (yes "explicit replace" 3795179268
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (replace -2)
            (("" (assert)
              (("" (replace -4) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (testswap-1 nil 3794615855
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*)
          (("" (auto-rewrite -1 -2 -3 -4 -5 -6 -7 -8 -9 -10)
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (swap const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (a1 const-decl "assignment" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (a2 const-decl "assignment" Hoare_logic nil)
    (a3 const-decl "assignment" Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (check_rotate 0
  (check_rotate-1 nil 3795273665
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (skosimp*) (("" (replace -2) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (x_gets_y const-decl "assignment" Hoare_logic nil)
    (y_gets_z const-decl "assignment" Hoare_logic nil)
    (rotate const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (a2 const-decl "assignment" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (a3 const-decl "assignment" Hoare_logic nil)
    (z_gets_w const-decl "assignment" Hoare_logic nil)
    (w_gets_x const-decl "assignment" Hoare_logic nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (testmax 0
  (testmax-2 "proof with smash" 3794580932
   ("" (skosimp*) (("" (auto-rewrite-defs) (("" (smash) nil nil)) nil))
    nil)
   ((maximum const-decl "nat" Hoare_logic nil)
    (a2 const-decl "assignment" Hoare_logic nil)
    (x_gets_y const-decl "assignment" Hoare_logic nil)
    (max const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (cnd const-decl "test" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (testmax-1 nil 3794579411
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (ground)
          (("1" (flatten) (("1" (assert) nil nil)) nil)
           ("2" (ground) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((x_gets_y const-decl "assignment" Hoare_logic nil)
    (maximum const-decl "nat" Hoare_logic nil)
    (max const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (cnd const-decl "test" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (checkswapmax 0
  (checkswapmax-2 "grind works" 3795845511 ("" (grind) nil nil) nil
   shostak)
  (checkswapmax-1 nil 3794616221
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (assert)
        (("" (ground)
          (("" (skosimp*)
            (("" (auto-rewrite -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12)
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a3 const-decl "assignment" Hoare_logic nil)
    (a2 const-decl "assignment" Hoare_logic nil)
    (a1 const-decl "assignment" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (swap const-decl "program" Hoare_logic nil)
    (x_gets_y const-decl "assignment" Hoare_logic nil)
    (swap_or_max const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (w_lt_0 const-decl "test" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil))
   shostak))
 (run_inc_x_tilln 0
  (run_inc_x_tilln-4
   "manual and incremental unwinding only using skosimp* and replace*"
   3795233756
   ("" (auto-rewrite-defs)
    (("" (skosimp*)
      (("" (assert)
        (("" (assert)
          (("" (skosimp*)
            (("" (assert)
              (("" (assert)
                (("" (replace*)
                  (("" (assert)
                    (("" (skosimp*)
                      (("" (replace*) (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (run_inc_x_tilln-3 "stylized proof inspired by grind$" 3794800982
   ("" (auto-rewrite-defs)
    (("" (assert)
      (("" (assert)
        (("" (skolem-typepred)
          (("" (flatten)
            (("" (replace*)
              (("" (assert)
                (("" (skolem-typepred)
                  (("" (flatten)
                    (("" (replace*)
                      (("" (assert)
                        (("" (skolem-typepred)
                          (("" (flatten)
                            (("" (replace*) (("" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x_inc const-decl "assignment" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (inc_x_tilln const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak)
  (run_inc_x_tilln-2 "grind glass box" 3794799070
   ("" (auto-rewrite-defs :always? t)
    ((""
      (assert :let-reduce? t :cases-rewrite? nil :ignore-typepreds?
              nil)
      ((""
        (assert :let-reduce? t :quant-simp? nil :implicit-typepreds?
                nil :ignore-typepreds? nil :cases-rewrite? nil)
        (("" (skolem-typepred)
          (("" (flatten)
            (("" (replace*)
              ((""
                (assert :let-reduce? t :quant-simp? nil
                        :implicit-typepreds? nil :ignore-typepreds? nil
                        :cases-rewrite? nil)
                (("" (skolem-typepred)
                  (("" (flatten)
                    (("" (replace*)
                      ((""
                        (assert :let-reduce? t :quant-simp? nil
                                :implicit-typepreds? nil
                                :ignore-typepreds? nil :cases-rewrite?
                                nil)
                        (("" (skolem-typepred)
                          (("" (flatten)
                            (("" (replace*)
                              ((""
                                (assert
                                 :let-reduce?
                                 t
                                 :quant-simp?
                                 nil
                                 :implicit-typepreds?
                                 nil
                                 :ignore-typepreds?
                                 nil
                                 :cases-rewrite?
                                 nil)
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((last const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (inc_x_tilln const-decl "program" Hoare_logic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (x_inc const-decl "assignment" Hoare_logic nil))
   shostak)
  (yes "proof using the grind sledge hammer" 3794798832
   ("" (grind) nil nil)
   ((x_inc const-decl "assignment" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inc_x_tilln const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil))
   shostak)
  (run_inc_x_tilln-1 nil 3794751618
   ("" (skosimp*)
    (("" (auto-rewrite-defs)
      (("" (stop-rewrite "[||]")
        (("" (assert)
          (("" (rewrite "[||]")
            (("" (skosimp*)
              (("" (assert)
                (("" (rewrite "[||]")
                  (("" (rewrite "[||]")
                    (("" (assert)
                      (("" (flatten)
                        (("" (assert)
                          (("" (replace -2)
                            (("" (assert)
                              ((""
                                (skosimp*)
                                ((""
                                  (rewrite "[||]")
                                  ((""
                                    (rewrite "[||]")
                                    ((""
                                      (assert)
                                      ((""
                                        (replace -6)
                                        ((""
                                          (assert)
                                          ((""
                                            (replace -5)
                                            ((""
                                              (assert)
                                              ((""
                                                (flatten)
                                                (("" (assert) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x_inc const-decl "assignment" Hoare_logic nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inc_x_tilln const-decl "program" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil))
   shostak))
 (dsf_prop 0
  (dsf_prop-1 nil 3794627183
   ("" (measure-induct+ "X`length" "X")
    (("" (auto-rewrite-defs)
      (("" (stop-rewrite "[||]")
        (("" (rewrite "[||]")
          (("" (skosimp*) (("" (inst?) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((<= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (first const-decl "state" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (splice const-decl "trace" Hoare_logic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (do_skip_forever const-decl "program" Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (program type-decl nil Hoare_logic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (> const-decl "bool" reals nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (measure_induction formula-decl nil measure_induction nil)
    (well_founded? const-decl "bool" orders nil)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (x_inc_inv_prop 0
  (x_inc_inv_prop-1 nil 3795255892 ("" (grind) nil nil)
   (([\|\|] def-decl "bool" Hoare_logic nil)
    (x_inc const-decl "assignment" Hoare_logic nil)
    (last const-decl "state" Hoare_logic nil)
    (test_lt_2 const-decl "test" Hoare_logic nil)
    (Inv const-decl "bool" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (state type-eq-decl nil Hoare_logic nil)
    (value type-eq-decl nil Hoare_logic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (inc_x_tilln_prop 0
  (inc_x_tilln_prop-1 nil 3795256684
   ("" (measure-induct+ "X`length" "X")
    (("" (auto-rewrite-defs)
      (("" (stop-rewrite "[||]")
        (("" (auto-rewrite "x_inc_inv_prop")
          (("" (lemma "x_inc_inv_prop")
            (("" (inst?) (("" (postpone) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (verify_inc_x_tilln 1
  (yes "stuck proof" 3795430097
   ("" (flatten)
    (("" (measure-induct+ "X`length" "X")
      (("" (auto-rewrite-defs)
        (("" (stop-rewrite "[||]")
          (("" (inst?)
            (("" (ground)
              (("" (rewrite "[||]")
                (("" (prop)
                  (("" (skosimp*) (("" (postpone) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (verify_inc_x_tilln-2 "subgoals discharged by grind" 3795403403
   ("" (flatten)
    (("" (measure-induct+ "X`length" "X")
      (("" (auto-rewrite-defs)
        (("" (stop-rewrite "[||]") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   nil shostak)
  (verify_inc_x_tilln-1 nil 3794826253
   ("" (flatten)
    (("" (measure-induct+ "X`length" "X")
      (("" (auto-rewrite-defs)
        (("" (stop-rewrite "[||]")
          (("" (rewrite "[||]" -2)
            (("" (prop)
              (("1" (skosimp*)
                (("1" (inst - "Z!1")
                  (("1" (inst - "Y!1")
                    (("1" (replace -3) (("1" (ground) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (well_founded? const-decl "bool" orders nil)
    (measure_induction formula-decl nil measure_induction nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (value type-eq-decl nil Hoare_logic nil)
    (state type-eq-decl nil Hoare_logic nil)
    (finseq type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (trace type-eq-decl nil Hoare_logic nil)
    (naturalnumber type-eq-decl nil naturalnumbers nil)
    (wf_nat formula-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (program type-decl nil Hoare_logic nil)
    ([\|\|] def-decl "bool" Hoare_logic nil)
    (inc_x_tilln const-decl "program" Hoare_logic nil)
    (Inv const-decl "bool" Hoare_logic nil)
    (first const-decl "state" Hoare_logic nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (last const-decl "state" Hoare_logic nil)
    (test_lt_2 const-decl "test" Hoare_logic nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (splice const-decl "trace" Hoare_logic nil)
    (O const-decl "finseq" finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak)))

